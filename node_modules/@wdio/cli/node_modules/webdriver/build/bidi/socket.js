/**
 * A WebSocket implementation that wraps the browser native WebSocket
 * interface and exposes a similar interface to the Node.js WebSocket
 */
class BrowserSocket {
    #callbacks = new Set();
    #ws;
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    constructor(wsUrl, opts) {
        this.#ws = new globalThis.WebSocket(wsUrl);
        this.#ws.onmessage = this.handleMessage.bind(this);
    }
    handleMessage(event) {
        for (const callback of this.#callbacks) {
            callback(event.data);
        }
    }
    send(data) {
        this.#ws.send(data);
    }
    on(event, callback) {
        if (event === 'open') {
            this.#ws.onopen = callback;
        }
        else if (event === 'close') {
            this.#ws.onclose = callback;
        }
        else if (event === 'error') {
            this.#ws.onerror = callback;
        }
        else {
            this.#callbacks.add(callback);
        }
        return this;
    }
    off(event, callback) {
        this.#callbacks.delete(callback);
        return this;
    }
    close() {
        this.#ws.close();
    }
}
/**
 * make sure to use the correct WebSocket implementation based on the environment
 */
export default globalThis.window
    ? BrowserSocket
    : (await import('ws')).default;
